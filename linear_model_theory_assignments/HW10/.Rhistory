cat("RMSE:     ", rmse_s_var, "\n")
n_sims <- 10e5
n <- 30
# True parameters
mu <- 10
sigma_true <- 2    # so sigma^2 = 4
sigma2_true <- sigma_true^2
# Constant C = E(|Z|) for Z ~ N(0,1)
C <- sqrt(2/pi)
# Storage vectors for the two estimators of sigma^2
gamma_sq_vals <- numeric(n_sims)  # will hold \hat{\gamma}^2
sample_var_vals <- numeric(n_sims) # will hold usual sample variance
# Main Monte Carlo loop
for (i in 1:n_sims) {
# 1) Generate a sample from Normal(10, 2^2)
y <- rnorm(n, mean = mu, sd = sigma_true)
# 2) Compute the LAD-based estimate: hat(gamma)
ybar <- mean(y)
gamma_hat <- (1/(n*C)) * sum(abs(y - ybar))  # \hat{\gamma}
gamma_sq_vals[i] <- gamma_hat^2             # \hat{\gamma}^2
# 3) Compute the usual sample variance: hat(sigma^2)
sample_var_vals[i] <- var(y)  # same as sum((y - ybar)^2)/(n-1)
}
# --- Compute bias, variance, and RMSE for each estimator ---
# 1) For LAD-based gamma^2
mean_gamma_sq <- mean(gamma_sq_vals)
bias_gamma_sq <- mean_gamma_sq - sigma2_true
var_gamma_sq <- var(gamma_sq_vals)
rmse_gamma_sq <- sqrt(mean((gamma_sq_vals - sigma2_true)^2))
# 2) For the usual sample variance
mean_s_var <- mean(sample_var_vals)
bias_s_var <- mean_s_var - sigma2_true
var_s_var <- var(sample_var_vals)
rmse_s_var <- sqrt(mean((sample_var_vals - sigma2_true)^2))
# Print results
cat("=== Results for LAD-based estimator (hat(gamma)^2) ===\n")
cat("Bias:     ", bias_gamma_sq, "\n")
cat("Variance: ", var_gamma_sq,  "\n")
cat("RMSE:     ", rmse_gamma_sq, "\n\n")
cat("=== Results for Usual Sample Variance (hat(sigma^2)) ===\n")
cat("Bias:     ", bias_s_var, "\n")
cat("Variance: ", var_s_var,  "\n")
cat("RMSE:     ", rmse_s_var, "\n")
n_sims <- 10e5
n <- 30
# True parameters
mu <- 10
sigma_true <- 2
sigma2_true <- sigma_true^2
# Constant C = E(|Z|) for Z ~ N(0,1)
C <- 2/sqrt(2*pi)
# Storage vectors for the two estimators of sigma^2
gamma_sq_vals <- numeric(n_sims)  # will hold \hat{\gamma}^2
sample_var_vals <- numeric(n_sims) # will hold usual sample variance
# Main Monte Carlo loop
for (i in 1:n_sims) {
# 1) Generate a sample from Normal(10, 2^2)
y <- rnorm(n, mean = mu, sd = sigma_true)
# 2) Compute the LAD-based estimate: hat(gamma)
ybar <- mean(y)
gamma_hat <- (1/(n*C)) * sum(abs(y - ybar))  # \hat{\gamma}
gamma_sq_vals[i] <- gamma_hat^2             # \hat{\gamma}^2
# 3) Compute the usual sample variance: hat(sigma^2)
sample_var_vals[i] <- var(y)  # same as sum((y - ybar)^2)/(n-1)
}
# 1) For gamma^2
mean_gamma_sq <- mean(gamma_sq_vals)
bias_gamma_sq <- mean_gamma_sq - sigma2_true
var_gamma_sq <- var(gamma_sq_vals)
rmse_gamma_sq <- sqrt(mean((gamma_sq_vals - sigma2_true)^2))
# For sigma hat^2
mean_s_var <- mean(sample_var_vals)
bias_s_var <- mean_s_var - sigma2_true
var_s_var <- var(sample_var_vals)
rmse_s_var <- sqrt(mean((sample_var_vals - sigma2_true)^2))
cat("(hat(gamma)^2) \n")
cat("Bias:     ", bias_gamma_sq, "\n")
cat("Variance: ", var_gamma_sq,  "\n")
cat("RMSE:     ", rmse_gamma_sq, "\n\n")
cat("(hat(sigma^2)) \n")
cat("Bias:     ", bias_s_var, "\n")
cat("Variance: ", var_s_var,  "\n")
cat("RMSE:     ", rmse_s_var, "\n")
setwd("C:/Users/m10849680/OneDrive/Mines/SPRING2025/MATH531/Homework/HW10")
install.packages("fields")
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(fields))
knitr::opts_chunk$set(echo = TRUE)
load("AudiA4.rda" )
#head( AudiA4)
#convenient scalings and naming
mileage<- AudiA4$mileage/1000
price<- AudiA4$price/1000
old<- ifelse( AudiA4$year<= 2016,1,0)
new<- ifelse( AudiA4$year > 2016,1,0)
y<- price
plot( mileage,price,
col= ifelse(old ==1, "grey", "green4"),
pch=16,
xlab="mileage (1000s miles)", ylab="price (1000s dollars)")
title("Audi A4 data
old (grey), new (green) ")
mileCut<- 38
indC<- ifelse( mileage <= mileCut,1,0)
indL<- ifelse( mileage <= mileCut,0,1)
# mixed cubic/linear X matrix
X<- cbind(indC,mileage*indC,mileage^2*indC,mileage^3*indC,
indL,mileage*indL)
A<- rbind(
c(1,mileCut,  mileCut^2,   mileCut^3, -1, -mileCut),
c(0,      1,  2*mileCut, 3*mileCut^2,  0,       -1),
c(0,      0,          2,   6*mileCut,  0,        0)
)
# Estimators #
XTXinv <- solve(t(X) %*%X) # (X^TX)^-1
beta_unconstrained <- XTXinv %*% t(X) %*% y # Unconstrained OLS
A_XTX_AT <- A %*% XTXinv %*% t(A) # A(X^TX)^-1A^T
beta_constrained <- beta_unconstrained - XTXinv %*% t(A) %*% solve(A_XTX_AT) %*% (A %*% beta_unconstrained)
# Y Hats #
y_hat_unconstrained <- X %*% beta_unconstrained
y_hat_constrained   <- X %*% beta_constrained
# Plotting #
# Scatterplot
plot(mileage, price,
col = ifelse(old == 1, "orange", "lightblue"),
pch = 16,
xlab = "Mileage (1000s miles)",
ylab = "Price (1000s USD)",
main = "Unconstrained vs. Constrained Estimates")
#
# Unconstrained Curve
lines(mileage[ord], y_hat_unconstrained[ord], col = "black", lwd = 3)
# Estimators #
XTXinv <- solve(t(X) %*%X) # (X^TX)^-1
beta_unconstrained <- XTXinv %*% t(X) %*% y # Unconstrained OLS
A_XTX_AT <- A %*% XTXinv %*% t(A) # A(X^TX)^-1A^T
beta_constrained <- beta_unconstrained - XTXinv %*% t(A) %*% solve(A_XTX_AT) %*% (A %*% beta_unconstrained)
# Y Hats #
y_hat_unconstrained <- X %*% beta_unconstrained
y_hat_constrained   <- X %*% beta_constrained
# Plotting #
# Scatterplot
plot(mileage, price,
col = ifelse(old == 1, "orange", "lightblue"),
pch = 16,
xlab = "Mileage (1000s miles)",
ylab = "Price (1000s USD)",
main = "Unconstrained vs. Constrained Estimates")
ord=38
# Unconstrained Curve
lines(mileage[ord], y_hat_unconstrained[ord], col = "black", lwd = 3)
# Constrained Curve
lines(mileage[ord], y_hat_constrained[ord], col = "grey", lwd = 3)
# Legend:
legend("topright",
legend = c("Unconstrained", "Constrained"),
col = c("black", "grey"),
lwd = 2)
# Estimators #
XTXinv <- solve(t(X) %*%X) # (X^TX)^-1
beta_unconstrained <- XTXinv %*% t(X) %*% y # Unconstrained OLS
A_XTX_AT <- A %*% XTXinv %*% t(A) # A(X^TX)^-1A^T
beta_constrained <- beta_unconstrained - XTXinv %*% t(A) %*% solve(A_XTX_AT) %*% (A %*% beta_unconstrained)
# Y Hats #
y_hat_unconstrained <- X %*% beta_unconstrained
y_hat_constrained   <- X %*% beta_constrained
# Plotting #
# Scatterplot
plot(mileage, price,
col = ifelse(old == 1, "orange", "lightblue"),
pch = 16,
xlab = "Mileage (1000s miles)",
ylab = "Price (1000s USD)",
main = "Unconstrained vs. Constrained Estimates")
ord <- order(mileage)
# Unconstrained Curve
lines(mileage[ord], y_hat_unconstrained[ord], col = "black", lwd = 3)
# Constrained Curve
lines(mileage[ord], y_hat_constrained[ord], col = "grey", lwd = 3)
# Legend:
legend("topright",
legend = c("Unconstrained", "Constrained"),
col = c("black", "grey"),
lwd = 2)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(fields))
knitr::opts_chunk$set(echo = TRUE)
load("AudiA4.rda" )
#head( AudiA4)
#convenient scalings and naming
mileage<- AudiA4$mileage/1000
price<- AudiA4$price/1000
old<- ifelse( AudiA4$year<= 2016,1,0)
new<- ifelse( AudiA4$year > 2016,1,0)
y<- price
plot( mileage,price,
col= ifelse(old ==1, "grey", "green4"),
pch=16,
xlab="mileage (1000s miles)", ylab="price (1000s dollars)")
title("Audi A4 data
old (grey), new (green) ")
mileCut<- 38
indC<- ifelse( mileage <= mileCut,1,0)
indL<- ifelse( mileage <= mileCut,0,1)
# mixed cubic/linear X matrix
X<- cbind(indC,mileage*indC,mileage^2*indC,mileage^3*indC,
indL,mileage*indL)
A<- rbind(
c(1,mileCut,  mileCut^2,   mileCut^3, -1, -mileCut),
c(0,      1,  2*mileCut, 3*mileCut^2,  0,       -1),
c(0,      0,          2,   6*mileCut,  0,        0)
)
# Estimators #
XTXinv <- solve(t(X) %*%X) # (X^TX)^-1
beta_unconstrained <- XTXinv %*% t(X) %*% y # Unconstrained OLS
A_XTX_AT <- A %*% XTXinv %*% t(A) # A(X^TX)^-1A^T
beta_constrained <- beta_unconstrained - XTXinv %*% t(A) %*% solve(A_XTX_AT) %*% (A %*% beta_unconstrained)
# Y Hats #
y_hat_unconstrained <- X %*% beta_unconstrained
y_hat_constrained   <- X %*% beta_constrained
# Plotting #
# Scatterplot
plot(mileage, price,
col = ifelse(old == 1, "orange", "lightblue"),
pch = 16,
xlab = "Mileage (1000s miles)",
ylab = "Price (1000s USD)",
main = "Unconstrained vs. Constrained Estimates")
ord <- order(mileage)
# Unconstrained Curve
lines(mileage[ord], y_hat_unconstrained[ord], col = "black", lwd = 3)
# Constrained Curve
lines(mileage[ord], y_hat_constrained[ord], col = "grey", lwd = 3)
# Legend:
legend("topright",
legend = c("Unconstrained", "Constrained"),
col = c("black", "grey"),
lwd = 2)
# RSS vals
RSS_H <- t(y- X %*% beta_constrained) %*% (y- X %*% beta_constrained) # RSS for constrained
RSS <- t(y- X %*% beta_unconstrained) %*% (y- X %*% beta_unconstrained) # RSS unconstrained
# Params
q <- nrow(A)          # Cosntraints
n <- length(y)        # Sample size
p <- ncol(X)          # Number of params in the unconstrained model
# Results
F_stat <- ((RSS_H - RSS) / q) / (RSS / (n - p))
p_value_F <- 1 - pf(F_stat, q, n - p)
print(F_stat)
print(p_value_F)
# Define Grid and initialize empty p-value list #
mileCut_grid <- seq(15, 150, by = 0.1)
p_values <- numeric(length(mileCut_grid))
# This loop just uses the code I've already written to generate p-values #
for(i in seq_along(mileCut_grid)) {
# Temp var
mileCut_temp <- mileCut_grid[i]
indC <- ifelse(mileage <= mileCut_temp, 1, 0)
indL <- ifelse(mileage <= mileCut_temp, 0, 1)
X <- cbind(indC,
mileage * indC,
mileage^2 * indC,
mileage^3 * indC,
indL,
mileage * indL)
A <- rbind(
c(1, mileCut_temp,  mileCut_temp^2,   mileCut_temp^3, -1, -mileCut_temp),
c(0, 1, 2 * mileCut_temp, 3 * mileCut_temp^2, 0, -1),
c(0, 0, 2, 6 * mileCut_temp, 0, 0)
)
XTXinv <- solve(t(X) %*% X)
beta_unconstrained <- XTXinv %*% t(X) %*% y
beta_constrained <- beta_unconstrained -
XTXinv %*% t(A) %*% solve(A %*% XTXinv %*% t(A)) %*% (A %*% beta_unconstrained)
RSS_unconstrained <- t(y - X %*% beta_unconstrained) %*% (y - X %*% beta_unconstrained)
RSS_constrained <- t(y - X %*% beta_constrained) %*% (y - X %*% beta_constrained)
q <- nrow(A)
n <- length(y)
p <- ncol(X)
F_stat <- ((RSS_constrained - RSS_unconstrained) / q) / (RSS_unconstrained / (n - p))
p_val <- 1 - pf(F_stat, q, n - p)
# Store P-value
p_values[i] <- p_val
}
max_index <- which.max(p_values)
max_mileCut <- mileCut_grid[max_index]
max_p_value <- p_values[max_index]
cat("Maximum p-value:", max_p_value, "at mileCut =", max_mileCut, "\n")
X1 <- cbind(X, old)   # X with new old indicator var
A1 <- cbind(A, rep(0, nrow(A)))  # New constraint on A
# Estimate the unconstrained extended model
X1TX1inv <- solve(t(X1) %*% X1)
beta_hat1 <- X1TX1inv %*% t(X1) %*% y
# Estimate the constrained extended model (constraints apply only to mileage part)
A1X1TX1invA1T <- A1 %*% X1TX1inv %*% t(A1)
betaHat1_constrained <- betaHat1 - X1TX1inv %*% t(A1) %*% solve(A1X1TX1invA1T) %*% (A1 %*% betaHat1)
X1 <- cbind(X, old)   # X with new old indicator var
A1 <- cbind(A, rep(0, nrow(A)))  # New constraint on A
# Unconstrained
X1TX1inv <- solve(t(X1) %*% X1)
beta_hat1 <- X1TX1inv %*% t(X1) %*% y
# Constrained
A1X1TX1invA1T <- A1 %*% X1TX1inv %*% t(A1)
beta_hat1_constrained <- beta_hat1 - X1TX1inv %*% t(A1) %*% solve(A1X1TX1invA1T) %*% (A1 %*% beta_hat1)
# H_0: beta_hat1 = 0
# Calculate the residual sum of squares (RSS) for the unconstrained extended model:
RSS1 <- t(y - X1 %*% beta_hat1) %*% (y - X1 %*% beta_hat1)
# Define degrees of freedom for the extended model:
n <- length(y)         # total number of observations
p1 <- ncol(X1)         # number of parameters in the extended model
# Estimate sigma^2 using the unconstrained model:
sigma2 <- as.numeric(RSS1 / (n - p1))
# The standard error for the additional variable is the square root of
# sigma^2 times the corresponding diagonal element from (X1'X1)^{-1}.
se_extra <- sqrt(sigma2 * X1TX1inv[p1, p1])
# The t-statistic for the 'old' variable (which is the last coefficient in beta_hat1)
t_stat <- beta_hat1[p1] / se_extra
# Two-sided p-value for the test:
p_value_extra <- 2 * (1 - pt(abs(t_stat), df = n - p1))
# Print the results:
cat("Coefficient for 'old':", beta_hat1[p1], "\n")
cat("t-statistic:", t_stat, "\n")
cat("p-value:", p_value_extra, "\n")
X1 <- cbind(X, old)   # X with new old indicator var
A1 <- cbind(A, rep(0, nrow(A)))  # New constraint on A
# Unconstrained
X1TX1inv <- solve(t(X1) %*% X1)
beta_hat1 <- X1TX1inv %*% t(X1) %*% y
# Constrained
A1X1TX1invA1T <- A1 %*% X1TX1inv %*% t(A1)
beta_hat1_constrained <- beta_hat1 - X1TX1inv %*% t(A1) %*% solve(A1X1TX1invA1T) %*% (A1 %*% beta_hat1)
# H_0: beta_hat1 = 0
# RSS for new unconstrained estimate
RSS1_unrestricted <- t(y - X1 %*% beta_hat1) %*% (y - X1 %*% beta_hat1)
RSS1_constrained  <- t(y - X1 %*% beta_hat1_constrained) %*% (y - X1 %*% beta_hat1_constrained)
# q is the difference in number of parameters between unconstrained and constrained
q <- 1  # since we're only adding "old"
# p1 is number of parameters in the unconstrained model
p1 <- ncol(X1)
# F-statistic:
F_stat <- ((RSS1_constrained - RSS1_unrestricted) / q) /
(RSS1_unrestricted / (n - p1))
# p-value:
p_value_F <- 1 - pf(F_stat, q, n - p1)
cat("F statistic:", F_stat, "\n")
cat("p-value for the 'old' variable:", p_value_F, "\n")
X1 <- cbind(X, old)   # X with new old indicator var
A1 <- cbind(A, rep(0, nrow(A)))  # New constraint on A
# Unconstrained
X1TX1inv <- solve(t(X1) %*% X1)
beta_hat1 <- X1TX1inv %*% t(X1) %*% y
# Constrained
A1X1TX1invA1T <- A1 %*% X1TX1inv %*% t(A1)
beta_hat1_constrained <- beta_hat1 - X1TX1inv %*% t(A1) %*% solve(A1X1TX1invA1T) %*% (A1 %*% beta_hat1)
# RSS for unconstrained and constrained
RSS1_unconstrained <- t(y - X1 %*% beta_hat1) %*% (y - X1 %*% beta_hat1)
RSS1_constrained  <- t(y - X1 %*% beta_hat1_constrained) %*% (y - X1 %*% beta_hat1_constrained)
q <- 1  # Only adding "old" variable
p1 <- ncol(X1) # # of params
# F-stat
F_stat <- ((RSS1_constrained - RSS1_unrestricted) / q) /
(RSS1_unrestricted / (n - p1))
# p-val
p_value_F <- 1 - pf(F_stat, q, n - p1)
cat("F statistic:", F_stat, "\n")
cat("p-value for the 'old' variable:", p_value_F, "\n")
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(fields))
knitr::opts_chunk$set(echo = TRUE)
load("AudiA4.rda" )
#head( AudiA4)
#convenient scalings and naming
mileage<- AudiA4$mileage/1000
price<- AudiA4$price/1000
old<- ifelse( AudiA4$year<= 2016,1,0)
new<- ifelse( AudiA4$year > 2016,1,0)
y<- price
plot( mileage,price,
col= ifelse(old ==1, "grey", "green4"),
pch=16,
xlab="mileage (1000s miles)", ylab="price (1000s dollars)")
title("Audi A4 data
old (grey), new (green) ")
mileCut<- 38
indC<- ifelse( mileage <= mileCut,1,0)
indL<- ifelse( mileage <= mileCut,0,1)
# mixed cubic/linear X matrix
X<- cbind(indC,mileage*indC,mileage^2*indC,mileage^3*indC,
indL,mileage*indL)
A<- rbind(
c(1,mileCut,  mileCut^2,   mileCut^3, -1, -mileCut),
c(0,      1,  2*mileCut, 3*mileCut^2,  0,       -1),
c(0,      0,          2,   6*mileCut,  0,        0)
)
# Estimators #
XTXinv <- solve(t(X) %*%X) # (X^TX)^-1
beta_unconstrained <- XTXinv %*% t(X) %*% y # Unconstrained OLS
A_XTX_AT <- A %*% XTXinv %*% t(A) # A(X^TX)^-1A^T
beta_constrained <- beta_unconstrained - XTXinv %*% t(A) %*% solve(A_XTX_AT) %*% (A %*% beta_unconstrained)
# Y Hats #
y_hat_unconstrained <- X %*% beta_unconstrained
y_hat_constrained   <- X %*% beta_constrained
# Plotting #
# Scatterplot
plot(mileage, price,
col = ifelse(old == 1, "orange", "lightblue"),
pch = 16,
xlab = "Mileage (1000s miles)",
ylab = "Price (1000s USD)",
main = "Unconstrained vs. Constrained Estimates")
ord <- order(mileage)
# Unconstrained Curve
lines(mileage[ord], y_hat_unconstrained[ord], col = "black", lwd = 3)
# Constrained Curve
lines(mileage[ord], y_hat_constrained[ord], col = "grey", lwd = 3)
# Legend:
legend("topright",
legend = c("Unconstrained", "Constrained"),
col = c("black", "grey"),
lwd = 2)
# RSS vals
RSS_H <- t(y- X %*% beta_constrained) %*% (y- X %*% beta_constrained) # RSS for constrained
RSS <- t(y- X %*% beta_unconstrained) %*% (y- X %*% beta_unconstrained) # RSS unconstrained
# Params
q <- nrow(A)          # Cosntraints
n <- length(y)        # Sample size
p <- ncol(X)          # Number of params in the unconstrained model
# Results
F_stat <- ((RSS_H - RSS) / q) / (RSS / (n - p))
p_value_F <- 1 - pf(F_stat, q, n - p)
print(F_stat)
print(p_value_F)
# Define Grid and initialize empty p-value list #
mileCut_grid <- seq(15, 150, by = 0.1)
p_values <- numeric(length(mileCut_grid))
# This loop just uses the code I've already written to generate p-values #
for(i in seq_along(mileCut_grid)) {
# Temp var
mileCut_temp <- mileCut_grid[i]
indC <- ifelse(mileage <= mileCut_temp, 1, 0)
indL <- ifelse(mileage <= mileCut_temp, 0, 1)
X <- cbind(indC,
mileage * indC,
mileage^2 * indC,
mileage^3 * indC,
indL,
mileage * indL)
A <- rbind(
c(1, mileCut_temp,  mileCut_temp^2,   mileCut_temp^3, -1, -mileCut_temp),
c(0, 1, 2 * mileCut_temp, 3 * mileCut_temp^2, 0, -1),
c(0, 0, 2, 6 * mileCut_temp, 0, 0)
)
XTXinv <- solve(t(X) %*% X)
beta_unconstrained <- XTXinv %*% t(X) %*% y
beta_constrained <- beta_unconstrained -
XTXinv %*% t(A) %*% solve(A %*% XTXinv %*% t(A)) %*% (A %*% beta_unconstrained)
RSS_unconstrained <- t(y - X %*% beta_unconstrained) %*% (y - X %*% beta_unconstrained)
RSS_constrained <- t(y - X %*% beta_constrained) %*% (y - X %*% beta_constrained)
q <- nrow(A)
n <- length(y)
p <- ncol(X)
F_stat <- ((RSS_constrained - RSS_unconstrained) / q) / (RSS_unconstrained / (n - p))
p_val <- 1 - pf(F_stat, q, n - p)
# Store P-value
p_values[i] <- p_val
}
max_index <- which.max(p_values)
max_mileCut <- mileCut_grid[max_index]
max_p_value <- p_values[max_index]
cat("Maximum p-value:", max_p_value, "at mileCut =", max_mileCut, "\n")
X1 <- cbind(X, old)   # X with new old indicator var
A1 <- cbind(A, rep(0, nrow(A)))  # New constraint on A
# Unconstrained
X1TX1inv <- solve(t(X1) %*% X1)
beta_hat1 <- X1TX1inv %*% t(X1) %*% y
# Constrained
A1X1TX1invA1T <- A1 %*% X1TX1inv %*% t(A1)
beta_hat1_constrained <- beta_hat1 - X1TX1inv %*% t(A1) %*% solve(A1X1TX1invA1T) %*% (A1 %*% beta_hat1)
# RSS for unconstrained and constrained
RSS1_unconstrained <- t(y - X1 %*% beta_hat1) %*% (y - X1 %*% beta_hat1)
RSS1_constrained  <- t(y - X1 %*% beta_hat1_constrained) %*% (y - X1 %*% beta_hat1_constrained)
q <- 1  # Only adding "old" variable
p1 <- ncol(X1) # # of params
# F-stat
F_stat <- ((RSS1_constrained - RSS1_unrestricted) / q) /
(RSS1_unrestricted / (n - p1))
# p-val
p_value_F <- 1 - pf(F_stat, q, n - p1)
# Variable is significant
cat("F statistic:", F_stat, "\n")
cat("p-value for the 'old' variable:", p_value_F, "\n")
X1 <- cbind(X, old)   # X with new old indicator var
A1 <- cbind(A, rep(0, nrow(A)))  # New constraint on A
# Unconstrained
X1TX1inv <- solve(t(X1) %*% X1)
beta_hat1 <- X1TX1inv %*% t(X1) %*% y
# Constrained
A1X1TX1invA1T <- A1 %*% X1TX1inv %*% t(A1)
beta_hat1_constrained <- beta_hat1 - X1TX1inv %*% t(A1) %*% solve(A1X1TX1invA1T) %*% (A1 %*% beta_hat1)
# RSS for unconstrained and constrained
RSS1_unconstrained <- t(y - X1 %*% beta_hat1) %*% (y - X1 %*% beta_hat1)
RSS1_constrained  <- t(y - X1 %*% beta_hat1_constrained) %*% (y - X1 %*% beta_hat1_constrained)
q <- 1  # Only adding "old" variable
p1 <- ncol(X1) # # of params
# F-stat
F_stat <- ((RSS1_constrained - RSS1_unconstrained) / q) /
(RSS1_unconstrained / (n - p1))
# p-val
p_value_F <- 1 - pf(F_stat, q, n - p1)
# Variable is significant
cat("F statistic:", F_stat, "\n")
cat("p-value for the 'old' variable:", p_value_F, "\n")
