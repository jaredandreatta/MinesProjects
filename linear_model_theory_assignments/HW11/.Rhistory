) +
theme_minimal()
# ARIMA(0,0,0)
system.time({
mean_model <- auto.arima(deseasonalized_train)
})
show(mean_model)
# Prepare forecast mean and confidence intervals
fc <- forecast(mean_model,h=24,level=99)
# Prepare testing data for plotting (only within the forecast window)
testing_df <- data.frame(
Time = seq_len(forecast_horizon),
Actual = deseasonalized_test[1:forecast_horizon]
)
forecast_mean <- fc$mean
# Prepare forecast dataframe for the forecast window
forecast_df <- data.frame(
Time = seq_len(forecast_horizon),
Forecast = forecast_mean,
)
forecast_mean <- fc$mean
# Prepare testing data for plotting (only within the forecast window)
testing_df <- data.frame(
Time = seq_len(forecast_horizon),
Actual = deseasonalized_test[1:forecast_horizon]
)
# Prepare forecast dataframe for the forecast window
forecast_df <- data.frame(
Time = seq_len(forecast_horizon),
Forecast = forecast_mean,
)
# Prepare forecast dataframe for the forecast window
forecast_df <- data.frame(
Time = seq_len(forecast_horizon),
Forecast = forecast_mean
)
# Plot testing data with forecast and confidence intervals
ggplot() +
# Plot testing data
geom_line(data = testing_df, aes(x = Time, y = Actual, color = "Actual"), size = 1) +
# Plot forecast mean
geom_line(data = forecast_df, aes(x = Time, y = Forecast, color = "Forecast Mean"), size = 1) +
labs(
title = "ARIMA(4,0,2) 1-Day Forecast on Testing Data",
x = "Time (Hours Ahead)",
y = "Deseasonalized RT Load Differences"
) +
# Customize colors and legend
scale_color_manual(
name = "Legend",
values = c("Actual" = "blue", "Forecast Mean" = "red")
) +
theme_minimal()
# Calculate error metrics for 1-day-ahead forecast
actual_values <- deseasonalized_test[1:forecast_horizon]
forecast_mean <- fc$mean
mae <- mean(abs(actual_values - forecast_mean))
rmse <- sqrt(mean((actual_values - forecast_mean)^2))
naive_mae <- mean(abs(diff(deseasonalized_train)))
mase <- mae / naive_mae
mape <- mean(abs((actual_values - forecast_mean) / actual_values)) * 100
# Print error metrics
cat("MAE:", mae, "\n") # 1847.779
cat("RMSE:", rmse, "\n") # 2101.126
cat("MASE:", mase, "\n") # 3.054544
cat("MAPE:", mape, "%", "\n") # 99.99979%
# Plot testing data with forecast and confidence intervals
ggplot() +
# Plot testing data
geom_line(data = testing_df, aes(x = Time, y = Actual, color = "Actual"), size = 1) +
# Plot forecast mean
geom_line(data = forecast_df, aes(x = Time, y = Forecast, color = "Forecast Mean"), size = 1) +
labs(
title = "ARIMA(4,0,2) 1-Day Forecast on Testing Data",
x = "Time",
y = "Differenced RT Load"
) +
# Customize colors and legend
scale_color_manual(
name = "Legend",
values = c("Actual" = "blue", "Forecast Mean" = "red")
) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
df <- data.frame(
mileage = mileage,
phi1   = Phi[, 1],
phi10  = Phi[, 10],
phi11  = Phi[, 11],
phi15  = Phi[, 15]
)
knitr::opts_chunk$set(echo = TRUE)
library(fields) # load fields package
knitr::opts_chunk$set(echo = TRUE)
install.packages("fields")
library(fields) # load fields package
setwd("C:\\Users\\Jared\\OneDrive\\Projects\\MinesProjects\\linear_model_theory_assignments")
knitr::opts_chunk$set(echo = TRUE)
install.packages("fields")
library(fields) # load fields package
load("AudiA4.rda" )
head( AudiA4)
# change units so the numbers are simpler
price<- AudiA4$price/1000 # in thousands of dollars
mileage<- AudiA4$mileage/1000 # thousands of miles
# the data
plot(mileage, price, col="grey", pch=16,
xlab= "miles (1000s)", ylab="price (1000s)")
OLSFit<- lm( price~ mileage + I(mileage^2))
summary(OLSFit)
library(ggplot2)
resid <- OLSFit$residuals
n<- length(OLSFit$residuals)
p<- length(OLSFit$coefficients)
sigma2Hat<- sum(OLSFit$residuals^2)/ ( n-p)
theoretical<- qnorm(  ((1:n) -.5)/n )
std_resid <- resid / sqrt(sigma2Hat)
ggplot(data = data.frame(std_resid = std_resid), aes(sample = std_resid)) +
stat_qq(color = "blue") +
stat_qq_line(color = "magenta")
mGrid1<- seq( 0, 175, length.out=50)
bigD<- rdist( mileage, mGrid1)/10
# 10 is a scaling  for the width of the bumps
Phi<- (1+ bigD)* exp( -bigD)
df <- data.frame(
mileage = mileage,
phi1   = Phi[, 1],
phi10  = Phi[, 10],
phi11  = Phi[, 11],
phi15  = Phi[, 15]
)
ggplot(df, aes(x = mileage)) +
geom_line(aes(y = phi1, color = "phi1"), size = 1) +
geom_line(aes(y = phi10, color = "phi10"), size = 1) +
geom_line(aes(y = phi11, color = "phi11"), size = 1) +
geom_line(aes(y = phi15, color = "phi15"), size = 1) +
labs(title = "Comparison of Basis Functions 1, 10, 11, and 15",
x = "Mileage",
y = "Basis Function Value",
color = "Basis Function") +
scale_color_manual(values = c("phi1" = "blue", "phi10" = "red",
"phi11" = "green", "phi15" = "purple")) +
theme_minimal()
FitBasis<- lm( price ~ Phi)
mySmoother<-function(alpha){
smootherCoef<- solve(t(Phi)%*%Phi + alpha* diag(1,50))%*%t(Phi)%*%price
ridgeFit<-  Phi%*%smootherCoef
# note smoother Matrix is
# S<- Phi%*%solve(t(Phi)%*%Phi + alpha* diag(1,50))%*%t(Phi)
return( ridgeFit)
}
X<- cbind( 1, mileage/10, (mileage^2)/1000 )
OLSFit2<- lm( price ~ X -1)
summary(OLSFit2)$coefficients
install.packages("fields")
read.csv("College.csv")
# a
college <- read.csv("College.csv")
# b
rownames(college) <- college[, 1]
View(college)
# a
college <- read.csv("College.csv")
# b
#rownames(college) <- college[, 1]
View(college)
# a
college <- read.csv("College.csv")
# b
rownames(college) <- college[, 1]
college <- college[, -1]
View(college)
# c
# i
summary(college)
# ii
pairs(college[,1:10])
# ii
pairs(college)
# c
attach(college)
# i
summary(college)
# ii
pairs(college)
# We can reference variables from the dataset with $
plot(auto$cylinders, auto$mpg)
# Loading Auto data
auto <- read.table("Auto.data")
View(auto) # View in separate window
head(auto)
auto <- read.table("Auto.data", header = TRUE, na.strings = "?", stringsAsFactors = TRUE)
# Notes:
# header = TRUE : Indicate to use first row of dataset as variable names
# na.strings = "?" : Indicates that na vals == "?" in the data
# stringsAsfactors = TRUE : Indicate that any string vars are qualitative
head(auto)
# CSV data
auto = read.csv("Auto.csv", na.strings = TRUE, stringsAsFactors = TRUE)
View(auto)
dim(auto)
names(auto) # Var names
# We can reference variables from the dataset with $
plot(auto$cylinders, auto$mpg)
# Alternatively, we can use attach() to access the variables of auto
attach(auto)
plot(cylinders,mpg)
# Cylinders is a categorical variable, so we can change it to a qualitative variable
auto$cylinders <- as.factor(cylinders)
# Modifying plots
plot(cylinders, mpg)
plot(cylinders, mpg, col = "red") # Changes points to red color
plot(cylinders, mpg, col = "red", varwidth = TRUE)
plot(cylinders, mpg, col = "red", varwidth = T,
horizontal = T)
plot(cylinders, mpg, col = "red", varwidth = T,
xlab = "cylinders", ylab = "MPG")
# Note: Says varwidth and horizontal are not params? What to do about this?
# Histograms
hist(mpg)
hist(mpg, col="red") # Change color of bars to red
hist(mpg, col="red", breaks=15) # Change amount of bars
# Scatterplot matrices using pairs()
pairs(auto)
pairs(
~mpg + displacement + horsepower + weight + acceleration,
data = auto
) # Specify a subset of variables for the plot
# identify() function
plot(horsepower, mpg)
# 3 args: x var, y var, and var we want to see printed for each point
identify(horsepower, mpg, name)
# ii
pairs(college)
# ii
college <- sapply(college, is.numeric)
pairs(college)
# a
college <- read.csv("College.csv")
# b
rownames(college) <- college[, 1]
college <- college[, -1]
View(college)
# c
attach(college)
# i
summary(college)
# ii
pairs(college)
View(college)
# ii
Private <- sapply(Private, is.numeric)
pairs(college)
# ii
college$Private <- as.numeric(college$Private)
pairs(college)
pairs(college[,1:10])
# ii
college$Private <- as.numeric(college$Private=="Yes")
pairs(college[,1:10])
# a
college <- read.csv("College.csv")
# b
rownames(college) <- college[, 1]
college <- college[, -1]
View(college)
# c
attach(college)
# i
summary(college)
# ii
college$Private <- as.numeric(college$Private=="Yes")
pairs(college[,1:10])
# iii
plot(Outstate, Private)
# iii
plot(Outstate, Private, type="box")
# iii
plot(Private, Outstate,
xlab = "Private",
ylab = "Outstate",
main = "Side-by-Side Boxplots of Outstate vs Private")
# iii
boxplot(Private~Outstate, data=college)
# iii
boxplot(Outstate~Private, data=college)
# iii
boxplot(Outstate~Private, data=college
varwidth=TRUE,
# iii
boxplot(Outstate~Private, data=college,
varwidth=TRUE,
notch=TRUE,
col=c("skyblue","orange"))
# iii
boxplot(Outstate~Private, data=college,
varwidth=TRUE,
col=c("skyblue","orange"))
Elite <- rep("No", nrow(college))
Elite[college$Top10perc > 50] <- "Yes"
Elite <- as.factor(Elite)
college <- data.frame(college, Elite)
summary(college)
boxplot(Outstate~Elite, data=college,
varwidth=TRUE,
col=c("skyblue","orange"))
boxplot(Outstate~Elite, data=college,
varwidth=TRUE,
col=c("skyblue","orange")
main="Outstate vs elite")
boxplot(Outstate~Elite, data=college,
varwidth=TRUE,
col=c("skyblue","orange"),
main="Outstate vs elite")
# iii
boxplot(Outstate~Private, data=college,
varwidth=TRUE,
col=c("skyblue","orange"),
main="Outstate vs Private")
# Divide the plotting window into 2 rows and 2 columns
par(mfrow = c(2, 2))
# Histogram for Outstate tuition with 15 bins
hist(college$Outstate, breaks = 15,
col = "skyblue",
main = "Histogram of Outstate Tuition",
xlab = "Outstate Tuition")
# Histogram for Room and Board costs with 20 bins
hist(college$Room.Board, breaks = 20,
col = "orange",
main = "Histogram of Room & Board",
xlab = "Room & Board")
# Histogram for Full-time Undergrad enrollment with 10 bins
hist(college$F.Undergrad, breaks = 10,
col = "lightgreen",
main = "Histogram of Full-Time Undergrads",
xlab = "Number of Students")
# Histogram for Expenditures with 25 bins
hist(college$Expend, breaks = 25,
col = "pink",
main = "Histogram of Expenditures",
xlab = "Expenditures")
# v
# Divide the plotting window into 2 rows and 2 columns
par(mfrow = c(2, 2))
# Outstate tuition
hist(college$Outstate, breaks = 15,
col = "skyblue",
main = "Histogram of Outstate Tuition",
xlab = "Outstate Tuition")
# R&B costs
hist(college$Room.Board, breaks = 20,
col = "orange",
main = "Histogram of Room & Board",
xlab = "Room & Board")
# FT Undergrads
hist(college$F.Undergrad, breaks = 10,
col = "lightgreen",
main = "Histogram of Full-Time Undergrads",
xlab = "Number of Students")
# Expenditure
hist(college$Expend, breaks = 25,
col = "pink",
main = "Histogram of Expenditures",
xlab = "Expenditures")
# FT Undergrads
hist(college$F.Undergrad, breaks = 10,
col = "gray",
main = "Histogram of Full-Time Undergrads",
xlab = "Number of Students")
# Outstate tuition
hist(college$Outstate, breaks = 15,
col = "skyblue",
main = "Histogram of Outstate Tuition",
xlab = "Outstate Tuition")
# R&B costs
hist(college$Room.Board, breaks = 20,
col = "orange",
main = "Histogram of Room & Board",
xlab = "Room & Board")
# FT Undergrads
hist(college$F.Undergrad, breaks = 10,
col = "gray",
main = "Histogram of Full-Time Undergrads",
xlab = "Number of Students")
# Expenditure
hist(college$Expend, breaks = 25,
col = "pink",
main = "Histogram of Expenditures",
xlab = "Expenditures")
# a
college <- read.csv("College.csv")
# b
rownames(college) <- college[, 1]
college <- college[, -1]
View(college)
# c
attach(college)
# i
summary(college)
# ii
college$Private <- as.numeric(college$Private=="Yes")
pairs(college[,1:10])
# iii
boxplot(Outstate~Private, data=college,
varwidth=TRUE,
col=c("skyblue","orange"),
main="Outstate vs Private")
# iv
Elite <- rep("No", nrow(college))
Elite[college$Top10perc > 50] <- "Yes"
Elite <- as.factor(Elite)
college <- data.frame(college, Elite)
summary(college) # 78 Universities
boxplot(Outstate~Elite, data=college,
varwidth=TRUE,
col=c("skyblue","orange"),
main="Outstate vs elite")
# v
# Divide the plotting window into 2 rows and 2 columns
par(mfrow = c(2, 2))
# Outstate tuition
hist(college$Outstate, breaks = 15,
col = "skyblue",
main = "Histogram of Outstate Tuition",
xlab = "Outstate Tuition")
# R&B costs
hist(college$Room.Board, breaks = 20,
col = "orange",
main = "Histogram of Room & Board",
xlab = "Room & Board")
# FT Undergrads
hist(college$F.Undergrad, breaks = 10,
col = "gray",
main = "Histogram of Full-Time Undergrads",
xlab = "Number of Students")
# Expenditure
hist(college$Expend, breaks = 25,
col = "pink",
main = "Histogram of Expenditures",
xlab = "Expenditures")
library(ISLR2)
install.packages("ISLR2")
library(ISLR2)
data <- Auto
fit <- lm(mpg ~ horsepower, data=data)
summary(fit)
#iv.
est <- coef(fit)[1] + 98 * coef(fit)[2] # Estimating for 98 HP
print(est)
predict(fit, newdata = data.frame(horsepower = 98), interval="prediction") # Prediction intervals
predict(fit, newdata = data.frame(horsepower = 98), interval="confidence") # Confidence intervals
plot(data$horsepower, data$mpg, pch=20, xlab="Horsepower", ylab="MPG", main= "MPG vs. HP")
abline(coef=coef(fit), lwd=3, col="orange")
par(mfrow=c(2,2))
plot(fit)
library(ISLR2)
data <- Auto
fit <- lm(mpg ~ horsepower, data=data)
summary(fit)
#iv.
est <- coef(fit)[1] + 98 * coef(fit)[2] # Estimating for 98 HP
print(est)
predict(fit, newdata = data.frame(horsepower = 98), interval="prediction") # Prediction intervals
predict(fit, newdata = data.frame(horsepower = 98), interval="confidence") # Confidence intervals
plot(data$horsepower, data$mpg, pch=20, xlab="Horsepower", ylab="MPG", main= "MPG vs. HP")
abline(coef=coef(fit), lwd=3, col="orange")
par(mfrow=c(2,2))
plot(fit)
library(ISLR2)
data <- Auto
fit <- lm(mpg ~ horsepower, data=data)
summary(fit)
#iv.
est <- coef(fit)[1] + 98 * coef(fit)[2] # Estimating for 98 HP
print(est)
predict(fit, newdata = data.frame(horsepower = 98), interval="prediction") # Prediction intervals
predict(fit, newdata = data.frame(horsepower = 98), interval="confidence") # Confidence intervals
plot(data$horsepower, data$mpg, pch=20, xlab="Horsepower", ylab="MPG", main= "MPG vs. HP")
abline(coef=coef(fit), lwd=3, col="orange")
par(mfrow=c(2,2))
plot(fit)
pairs(data)
cor(data-name)
cor(data-data$name)
cor(.-data$name)
names(data)
cor(data[1:8])
names(data)
cor(data[1:8])
X
X <- subset(data, select = -name)
X
X <- subset(data, select = c(-name, -mpg))
X
X <- subset(data, select = c(-name, -mpg))
y <- mpg
X <- subset(data, select = c(-name, -mpg))
y <- data$mpg
fit <- lm(y ~ X)
X
X <- subset(data, select = c(-name, -mpg))
y <- data$mpg
fit <- lm(y ~ X)
X <- subset(data, select = c(-name, -mpg))
y <- data$mpg
fit <- lm(y ~ X, data=data)
X <- subset(data, select = c(-name, -mpg))
y <- data$mpg
fit <- lm(mpg ~ .-name, data=data)
summary(fit)
par(mfrow=c(2,2))
plot(fit)
